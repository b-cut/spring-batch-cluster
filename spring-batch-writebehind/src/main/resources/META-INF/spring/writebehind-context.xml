<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/integration/jdbc http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc-2.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<context:property-placeholder
		location="classpath:/META-INF/sql/sql.statement.properties" />

	<aop:config>
		<aop:advisor advice-ref="jobRepositoryInterceptor" pointcut="bean(jobRepository)"/>
	</aop:config>

	<int:publishing-interceptor id="jobRepositoryInterceptor">
		<int:method pattern="createJobExecution" channel="execution.created.channel" payload="#return" />
		<int:method pattern="update" channel="execution.updated.channel" payload="#args[0]"/>
		<int:method pattern="add" channel="stepexecution.created.channel"  payload="#args[0]"/>
	</int:publishing-interceptor>

	<int:channel id="execution.updated.channel">
		<int:dispatcher task-executor="writeBehindTaskExecutor"/>
	</int:channel>

	<int:chain input-channel="execution.updated.channel">
		<int:transformer expression="@copyUtils.copyExecution(payload)"/>
		<int:payload-type-router>
			<int:mapping type="org.springframework.batch.core.JobExecution"
				channel="jobexecution.updated.channel" />
			<int:mapping type="org.springframework.batch.core.StepExecution"
				channel="stepexecution.updated.channel" />
		</int:payload-type-router>
	
	</int:chain>

	<int:channel id="jobexecution.updated.channel" />


	<int-jdbc:outbound-channel-adapter
		channel="jobexecution.updated.channel" data-source="dataSource"
		query="${jobExecution.update}" sql-parameter-source-factory="jobExecutionUpdateSpelSqlFactory" />

	<int:channel id="stepexecution.updated.channel">
		<int:dispatcher task-executor="writeBehindTaskExecutor"/>
	</int:channel>

		<int-jdbc:outbound-channel-adapter
			channel="stepexecution.updated.channel"
			data-source="dataSource"
			query="${stepExecution.update}" 
			sql-parameter-source-factory="stepExecutionUpdateSpelSqlFactory"
			keys-generated="false" />		

	<int:channel id="execution.created.channel">
		<int:dispatcher task-executor="writeBehindTaskExecutor" />
	</int:channel>
	
	<int:chain input-channel="execution.created.channel">
		<int:transformer expression="@copyUtils.copyExecution(payload)"/>
		<int:recipient-list-router>
			<int:recipient channel="instance.create.channel" />
			<int:recipient channel="execution.create.channel" />
		</int:recipient-list-router>
	</int:chain>

	<int:channel id="instance.create.channel" />

	<int-jdbc:outbound-channel-adapter
		channel="instance.create.channel" data-source="dataSource" query="${jobInstance.insert}"
		sql-parameter-source-factory="jobInstanceCreateSpelSqlFactory"
		keys-generated="false" />

	<int:channel id="execution.create.channel" />

	<int-jdbc:outbound-channel-adapter
		channel="execution.create.channel" data-source="dataSource"
		query="${jobExecution.insert}" sql-parameter-source-factory="jobExecutionInsertSpelSqlFactory"
		keys-generated="false"/>

	<int:channel id="stepexecution.created.channel">
		<int:dispatcher task-executor="writeBehindTaskExecutor" />
	</int:channel>

	<int:chain input-channel="stepexecution.created.channel">
		<int:transformer expression="@copyUtils.copyExecution(payload)"/>
		<int-jdbc:outbound-channel-adapter
			data-source="dataSource"
			query="${stepExecution.insert}" 
			sql-parameter-source-factory="stepExecutionInsertSpelSqlFactory"
			keys-generated="false" />
	</int:chain>


	<!-- :start_time, :end_time, :status, :exit_code, :exit_message, :version, 
		:create_time, :last_updated :job_execution_id :version -->

	<bean id="jobExecutionUpdateSpelSqlFactory"
		class="org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory">
		<property name="parameterExpressions">
			<map>
				<entry key="start_time" value="payload.getStartTime()" />
				<entry key="end_time" value="payload.getEndTime()" />
				<entry key="status" value="payload.getStatus().toString()" />
				<entry key="exit_code" value="payload.getExitStatus().getExitCode()" />
				<entry key="exit_message" value="payload.getExitStatus().getExitDescription()" />
				<entry key="version" value="payload.getVersion()" />
				<entry key="create_time" value="payload.getCreateTime()" />
				<entry key="last_updated" value="payload.getLastUpdated()" />
				<entry key="job_execution_id" value="payload.getId()" />
				<entry key="whereVersion" value="payload.getVersion() - 1" /><!-- deincrement by one - we're getting the version after it's been incremented -->
			</map>
		</property>
	</bean>

	<!-- :start_time, :end_time, :status, :commit_count, :read_count, :filter_count, 
		:write_count, :exit_code, :exit_message, :version, :read_skip_count, :process_skip_count, 
		:write_skip_count, :rollback_count, :last_updated :step_execution_id :version -->

	<bean id="stepExecutionUpdateSpelSqlFactory"
		class="org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory">
		<property name="parameterExpressions">
			<map>
				<entry key="start_time" value="payload.getStartTime()" />
				<entry key="end_time" value="payload.getEndTime()" />
				<entry key="status" value="payload.getStatus().toString()" />
				<entry key="commit_count" value="payload.getCommitCount()" />
				<entry key="read_count" value="payload.getReadCount()" />
				<entry key="filter_count" value="payload.getFilterCount()" />
				<entry key="write_count" value="payload.getWriteCount()" />
				<entry key="exit_code" value="payload.getExitStatus().getExitCode()" />
				<entry key="exit_message" value="payload.getExitStatus().getExitDescription()" />
				<entry key="last_updated" value="payload.getLastUpdated()" />
				<entry key="version" value="payload.getVersion()" />
				<entry key="read_skip_count" value="payload.getReadSkipCount()" />
				<entry key="process_skip_count" value="payload.getProcessSkipCount()" />
				<entry key="write_skip_count" value="payload.getWriteSkipCount()" />
				<entry key="rollback_count" value="payload.getRollbackCount()" />
				<entry key="step_execution_id" value="payload.getId()" />
				<entry key="version" value="payload.getVersion()" />
				<entry key="step_name" value="payload.getStepName()" />
				<entry key="job_execution_id" value="payload.getJobExecution().getId()" />
				<entry key="whereVersion" value="payload.getVersion() - 1" /><!-- deincrement by one - we're getting the version after it's been incremented -->
			</map>
		</property>
	</bean>



	<!-- :step_execution_id, :version, :step_name, :job_execution_id, :start_time, 
		:end_time, :status, :commit_count, :read_count, :filter_count, :write_count, 
		:exit_code, :exit_message, :read_skip_count, :write_skip_count, :process_skip_count, 
		:rollback_count, :last_updated -->

	<bean id="stepExecutionInsertSpelSqlFactory"
		class="org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory">
		<property name="parameterExpressions">
			<map>
				<entry key="step_execution_id" value="payload.getId()" />
				<entry key="version" value="payload.getVersion()" />
				<entry key="step_name" value="payload.getStepName()" />
				<entry key="job_execution_id" value="payload.getJobExecution().getId()" />
				<entry key="start_time" value="payload.getStartTime()" />
				<entry key="end_time" value="payload.getEndTime()" />
				<entry key="status" value="payload.getStatus().toString()" />
				<entry key="commit_count" value="payload.getCommitCount()" />
				<entry key="read_count" value="payload.getReadCount()" />
				<entry key="filter_count" value="payload.getFilterCount()" />
				<entry key="write_count" value="payload.getWriteCount()" />
				<entry key="exit_code" value="payload.getExitStatus().getExitCode()" />
				<entry key="exit_message" value="payload.getExitStatus().getExitDescription()" />
				<entry key="read_skip_count" value="payload.getReadSkipCount()" />
				<entry key="write_skip_count" value="payload.getWriteSkipCount()" />
				<entry key="process_skip_count" value="payload.getProcessSkipCount()" />
				<entry key="rollback_count" value="payload.getRollbackCount()" />
				<entry key="last_updated" value="payload.getLastUpdated()" />
			</map>
		</property>
	</bean>

	<!-- :job_instance_id, :job_name, :job_key, :version -->

	<bean id="jobInstanceCreateSpelSqlFactory"
		class="org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory">
		<property name="parameterExpressions">
			<map>
				<entry key="job_instance_id" value="payload.getJobInstance().getId()" />
				<entry key="job_name" value="payload.getJobInstance().getJobName()" />
				<entry key="job_key"
					value="@jobKeyGenerator.generateKey(payload.getJobParameters())" />
				<entry key="version" value="payload.getJobInstance().getVersion()" />
			</map>
		</property>
	</bean>


	<!-- :job_execution_id, :job_instance_id, :start_time, :end_time, :status, 
		:exit_code, :exit_message, :version, :create_time, :last_updated -->

	<bean id="jobExecutionInsertSpelSqlFactory"
		class="org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory">
		<property name="parameterExpressions">
			<map>
				<entry key="job_execution_id" value="payload.getId()" />
				<entry key="job_instance_id" value="payload.getJobInstance().getId()" />
				<entry key="start_time" value="payload.getStartTime()" />
				<entry key="end_time" value="payload.getEndTime()" />
				<entry key="status" value="payload.getStatus().toString()" />
				<entry key="exit_code" value="payload.getExitStatus().getExitCode()" />
				<entry key="exit_message" value="payload.getExitStatus().getExitDescription()" />
				<entry key="version" value="payload.getVersion()" />
				<entry key="create_time" value="payload.getCreateTime()" />
				<entry key="last_updated" value="payload.getLastUpdated()" />
			</map>
		</property>
	</bean>

	<bean id="jobKeyGenerator" class="org.springframework.batch.core.DefaultJobKeyGenerator" />

	<bean id="datasourceTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="copyUtils" class="de.incompleteco.spring.batch.map.CopyUtils"/>

	<beans profile="local">

		<task:executor id="writeBehindTaskExecutor" />

		<bean id="databaseType" class="java.lang.String">
			<constructor-arg value="H2" />
		</bean>

		<jdbc:embedded-database id="dataSource" type="H2">
			<jdbc:script
				location="classpath:/org/springframework/batch/core/schema-h2.sql" />
		</jdbc:embedded-database>
	</beans>

</beans>
