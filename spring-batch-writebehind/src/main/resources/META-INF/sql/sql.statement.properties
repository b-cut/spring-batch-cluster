jobInstance.insert=INSERT into BATCH_JOB_INSTANCE(JOB_INSTANCE_ID, JOB_NAME, JOB_KEY, VERSION) values (:job_instance_id, :job_name, :job_key, :version)
jobExecution.insert=INSERT into BATCH_JOB_EXECUTION(JOB_EXECUTION_ID, JOB_INSTANCE_ID, START_TIME, END_TIME, STATUS, EXIT_CODE, EXIT_MESSAGE, VERSION, CREATE_TIME, LAST_UPDATED) values (:job_execution_id, :job_instance_id, :start_time, :end_time, :status, :exit_code, :exit_message, :version, :create_time, :last_updated)
jobExecution.update=UPDATE BATCH_JOB_EXECUTION set START_TIME = :start_time, END_TIME = :end_time, STATUS = :status, EXIT_CODE = :exit_code, EXIT_MESSAGE = :exit_message, VERSION = :version, CREATE_TIME = :create_time, LAST_UPDATED = :last_updated where JOB_EXECUTION_ID = :job_execution_id and VERSION = :whereVersion
jobParameters.insert=INSERT into BATCH_JOB_EXECUTION_PARAMS(JOB_EXECUTION_ID, KEY_NAME, TYPE_CD, STRING_VAL, DATE_VAL, LONG_VAL, DOUBLE_VAL, IDENTIFYING) values (:job_execution_id, :key_name, :type_cd, :string_val, :date_val, :long_val, :double_val, :identifying)
stepExecution.insert=INSERT into BATCH_STEP_EXECUTION(STEP_EXECUTION_ID, VERSION, STEP_NAME, JOB_EXECUTION_ID, START_TIME,  END_TIME, STATUS, COMMIT_COUNT, READ_COUNT, FILTER_COUNT, WRITE_COUNT, EXIT_CODE, EXIT_MESSAGE, READ_SKIP_COUNT, WRITE_SKIP_COUNT, PROCESS_SKIP_COUNT, ROLLBACK_COUNT, LAST_UPDATED) values (:step_execution_id, :version, :step_name, :job_execution_id, :start_time, :end_time, :status, :commit_count, :read_count, :filter_count, :write_count, :exit_code, :exit_message, :read_skip_count, :write_skip_count, :process_skip_count, :rollback_count, :last_updated)
stepExecution.update=UPDATE BATCH_STEP_EXECUTION set START_TIME = :start_time, END_TIME = :end_time,  STATUS = :status, COMMIT_COUNT = :commit_count, READ_COUNT = :read_count, FILTER_COUNT = :filter_count, WRITE_COUNT = :write_count, EXIT_CODE = :exit_code,  EXIT_MESSAGE = :exit_message, VERSION = :version, READ_SKIP_COUNT = :read_skip_count, PROCESS_SKIP_COUNT = :process_skip_count, WRITE_SKIP_COUNT = :write_skip_count, ROLLBACK_COUNT = :rollback_count, LAST_UPDATED = :last_updated where STEP_EXECUTION_ID = :step_execution_id and VERSION = :whereVersion
jobExecutionContext.insert=INSERT INTO BATCH_JOB_EXECUTION_CONTEXT (SHORT_CONTEXT, SERIALIZED_CONTEXT, JOB_EXECUTION_ID) VALUES ( ?, ?, ? )
jobExecutionContext.update=UPDATE BATCH_JOB_EXECUTION_CONTEXT SET SHORT_CONTEXT = ?, SERIALIZED_CONTEXT = ? WHERE JOB_EXECUTION_ID = ?
stepExecutionContext.insert=INSERT INTO BATCH_STEP_EXECUTION_CONTEXT  (SHORT_CONTEXT, SERIALIZED_CONTEXT, STEP_EXECUTION_ID) VALUES ( ?, ?, ? )
stepExecutionContext.update=UPDATE BATCH_STEP_EXECUTION_CONTEXT SET SHORT_CONTEXT = ?, SERIALIZED_CONTEXT = ? WHERE STEP_EXECUTION_ID = ?
